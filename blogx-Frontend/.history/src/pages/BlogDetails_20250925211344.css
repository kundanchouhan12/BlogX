import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import axios from "axios";
import { useAuth } from "../context/AuthContext";
import { FaArrowLeft, FaEllipsisV, FaRegThumbsUp, FaRegCommentDots } from "react-icons/fa";
import DOMPurify from "dompurify";
import "./BlogDetails.css";

const Avatar = ({ name, size = 40 }) => {
  const initials = (name || "U").split(" ").map(s => s[0]).slice(0,2).join("").toUpperCase();
  const bg = "#"+((1<<24)*Math.abs(hashCode(name || "user"))%0xffffff).toString(16).padStart(6,"0");
  return (
    <div
      className="comment-avatar"
      style={{ width: size, height: size, borderRadius: size/2, background: bg, display: "inline-flex", alignItems: "center", justifyContent: "center", color: "#fff", fontWeight: 700, fontSize: size/2.2 }}
      title={name}
    >
      {initials}
    </div>
  );
};

function hashCode(str) {
  let h = 0;
  for (let i = 0; i < str.length; i++) h = (h << 5) - h + str.charCodeAt(i) | 0;
  return h;
}

const BlogDetails = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { user, token, API_URL } = useAuth();

  const [post, setPost] = useState(null);
  const [loading, setLoading] = useState(true);
  const [commentText, setCommentText] = useState("");
  const [editingCommentId, setEditingCommentId] = useState(null);
  const [editText, setEditText] = useState("");
  const [replyTo, setReplyTo] = useState(null);
  const [replyContent, setReplyContent] = useState("");
  const [expandedComments, setExpandedComments] = useState({});

  useEffect(() => {
    const fetchPost = async () => {
      try {
        const res = await axios.get(`${API_URL}/api/posts/${id}`);
        const commentRes = await axios.get(`${API_URL}/api/comments/post/${id}`);
        setPost({ ...res.data, comments: commentRes.data });
      } catch (err) {
        console.error("Error fetching post:", err);
      } finally {
        setLoading(false);
      }
    };
    fetchPost();
  }, [id, API_URL]);

  const isAuthor = user?.name === post?.username;

  const handleAddComment = async (e) => {
    e.preventDefault();
    if (!commentText.trim()) return;

    try {
      const res = await axios.post(
        `${API_URL}/api/comments`,
        { postId: post.id, content: commentText },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setPost((prev) => ({
        ...prev,
        comments: [...(prev.comments || []), res.data],
      }));
      setCommentText("");
    } catch (err) {
      console.error(err);
      alert("Failed to add comment");
    }
  };

  const handleAddReply = async (parentId) => {
    if (!replyContent.trim()) return;

    try {
      const res = await axios.post(
        `${API_URL}/api/comments`,
        { postId: post.id, content: replyContent, parentId },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      const updateReplies = (list) =>
        list.map((c) =>
          c.id === parentId
            ? { ...c, replies: [...(c.replies || []), res.data] }
            : { ...c, replies: c.replies ? updateReplies(c.replies) : [] }
        );

      setPost((prev) => ({ ...prev, comments: updateReplies(prev.comments) }));
      setReplyContent("");
      setReplyTo(null);
    } catch (err) {
      console.error(err);
      alert("Failed to add reply");
    }
  };

  const handleDeleteComment = async (commentId) => {
    try {
      await axios.delete(`${API_URL}/api/comments/${commentId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      const removeComment = (list) =>
        list
          .filter((c) => c.id !== commentId)
          .map((c) => ({ ...c, replies: c.replies ? removeComment(c.replies) : [] }));

      setPost((prev) => ({ ...prev, comments: removeComment(prev.comments) }));
    } catch (err) {
      console.error(err);
      alert("Failed to delete comment");
    }
  };

  const handleEditSave = async (commentId) => {
    if (!editText.trim()) return;
    try {
      const res = await axios.put(
        `${API_URL}/api/comments/${commentId}`,
        { content: editText },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      const updateComment = (list) =>
        list.map((c) =>
          c.id === commentId
            ? res.data
            : { ...c, replies: c.replies ? updateComment(c.replies) : [] }
        );

      setPost((prev) => ({ ...prev, comments: updateComment(prev.comments) }));
      setEditingCommentId(null);
      setEditText("");
    } catch (err) {
      console.error(err);
      alert("Failed to update comment");
    }
  };

  const handleDeletePost = async () => {
    if (!window.confirm("Are you sure you want to delete this post?")) return;
    try {
      await axios.delete(`${API_URL}/api/posts/${post.id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      navigate("/");
    } catch (err) {
      console.error(err);
      alert("Failed to delete post.");
    }
  };

  const toggleReplies = (commentId) => {
    setExpandedComments((prev) => ({ ...prev, [commentId]: !prev[commentId] }));
  };

  const renderComments = (list = [], level = 0) =>
    list.map((comment) => (
      <div key={comment.id} className={`comment-row level-${level}`} style={{ marginLeft: level * 12 }}>
        <div className="comment-left">
          <Avatar name={comment.username} size={44} />
        </div>

        <div className="comment-body">
          <div className="comment-meta">
            <div className="meta-left">
              <span className="comment-username">{comment.username}</span>
              <span className="comment-dot">‚Ä¢</span>
              <span className="comment-time">{formatTimeAgo(comment.createdAt)}</span>
            </div>
            <div className="meta-right">
              <button className="icon-btn" title="More"><FaEllipsisV /></button>
            </div>
          </div>

          <div className="comment-content">
            {editingCommentId === comment.id ? (
              <textarea
                value={editText}
                onChange={(e) => setEditText(e.target.value)}
                className="edit-textarea"
                rows={2}
              />
            ) : (
              comment.content
            )}
          </div>

          <div className="comment-actions">
            <button className="action-like"><FaRegThumbsUp /> <span>0</span></button>
            <button
              className="action-reply"
              onClick={() => {
                setReplyTo(comment.id);
                setReplyContent(`@${comment.username} `);
              }}
            >
              <FaRegCommentDots /> Reply
            </button>

            {comment.username === user?.name && editingCommentId !== comment.id && (
              <button className="action-small" onClick={() => { setEditingCommentId(comment.id); setEditText(comment.content); }}>Edit</button>
            )}
            {editingCommentId === comment.id && (
              <>
                <button className="action-small" onClick={() => handleEditSave(comment.id)}>Save</button>
                <button className="action-small" onClick={() => setEditingCommentId(null)}>Cancel</button>
              </>
            )}
            {comment.username === user?.name && (
              <button className="action-small danger" onClick={() => handleDeleteComment(comment.id)}>Delete</button>
            )}
          </div>

          {replyTo === comment.id && (
            <form
              onSubmit={(e) => {
                e.preventDefault();
                handleAddReply(comment.id);
              }}
              className="reply-form"
            >
              <input
                type="text"
                value={replyContent}
                onChange={(e) => setReplyContent(e.target.value)}
                placeholder={`Replying to ${comment.username}`}
                autoFocus
                className="reply-input"
              />
              <button type="submit" className="reply-submit">Reply</button>
            </form>
          )}

          {comment.replies && comment.replies.length > 0 && (
            <>
              <div className="reply-toggle" onClick={() => toggleReplies(comment.id)}>
                {expandedComments[comment.id] ? "Hide replies" : `View ${comment.replies.length} replies`}
              </div>
              {expandedComments[comment.id] && (
                <div className="replies-list">
                  {renderComments(comment.replies, level + 1)}
                </div>
              )}
            </>
          )}
        </div>
      </div>
    ));

  if (loading) return <div className="loader">Loading...</div>;
  if (!post) return <div className="error">Post not found</div>;

  return (
    <div className="blog-details-container">
      <button className="back-button" onClick={() => navigate("/")}>
        <FaArrowLeft /> Back to Home
      </button>

      <div className="post-card">
        <h1 className="post-title">{post.title}</h1>
        <div className="post-meta">
          <div className="meta-left">
            <Avatar name={post.username} size={36} />
            <div className="author-block">
              <div className="author-name">{post.username || "Unknown"}</div>
              <div className="author-sub">Published {formatDate(post.createdAt)}</div>
            </div>
          </div>
          <div className="meta-right">
            {isAuthor && (
              <div className="post-actions-premium">
                <button onClick={() => navigate(`/update-post/${post.id}`)} className="btn-outline">‚úèÔ∏è Edit</button>
                <button onClick={handleDeletePost} className="btn-danger">üóëÔ∏è Delete</button>
              </div>
            )}
          </div>
        </div>

        {post.imageUrl && <img className="post-image" src={post.imageUrl} alt={post.title} />}

        <div
          className="post-content prose"
          dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(post.content) }}
        />
      </div>

      <div className="comment-section">
        <div className="comment-header-top">
          <h3 className="comments-title">Comments</h3>
          <div className="comments-info">
            {post.comments?.length || 0} comments
          </div>
        </div>

        {token ? (
          <form onSubmit={handleAddComment} className="new-comment-form">
            <Avatar name={user?.name} size={44} />
            <input
              type="text"
              value={commentText}
              onChange={(e) => setCommentText(e.target.value)}
              placeholder="Add a public comment..."
              className="new-comment-input"
            />
            <div className="new-comment-actions">
              <button type="submit" className="btn-primary" disabled={!commentText.trim()}>Post</button>
            </div>
          </form>
        ) : (
          <div className="login-to-comment">Login to comment.</div>
        )}

        <div className="comments-list">
          {post.comments && post.comments.length > 0 ? renderComments(post.comments) : <div className="no-comments">No comments yet. Be the first!</div>}
        </div>
      </div>
    </div>
  );
};

export default BlogDetails;

/* Helper functions */
function formatTimeAgo(dateStr) {
  if (!dateStr) return "";
  const diff = Date.now() - new Date(dateStr).getTime();
  const seconds = Math.floor(diff / 1000);
  if (seconds < 60) return `${seconds}s`;
  const minutes = Math.floor(seconds / 60);
  if (minutes < 60) return `${minutes}m`;
  const hours = Math.floor(minutes / 60);
  if (hours < 24) return `${hours}h`;
  const days = Math.floor(hours / 24);
  if (days < 30) return `${days}d`;
  return formatDate(dateStr);
}

function formatDate(dateStr) {
  if (!dateStr) return "Unknown";
  const d = new Date(dateStr);
  return d.toLocaleDateString();
}
